ARM GAS  /tmp/ccHWmSBT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"light_rcc_init.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Light_SystemClock_Config,"ax",%progbits
  20              		.align	2
  21              		.global	Light_SystemClock_Config
  22              		.code	16
  23              		.thumb_func
  25              	Light_SystemClock_Config:
  26              	.LFB44:
  27              		.file 1 "Core/Src/light_rcc_init.c"
   1:Core/Src/light_rcc_init.c **** 
   2:Core/Src/light_rcc_init.c **** #include "light_rcc_init.h"
   3:Core/Src/light_rcc_init.c **** #include "stm32f0xx_hal.h"
   4:Core/Src/light_rcc_init.c **** #include "stm32f0xx_hal_rcc.h"
   5:Core/Src/light_rcc_init.c **** #include "stm32f030x6.h"
   6:Core/Src/light_rcc_init.c **** #include <stdint.h>
   7:Core/Src/light_rcc_init.c **** 
   8:Core/Src/light_rcc_init.c **** #ifdef CONFIG_LIGHT_RCC_INIT
   9:Core/Src/light_rcc_init.c **** 
  10:Core/Src/light_rcc_init.c **** 
  11:Core/Src/light_rcc_init.c **** /*
  12:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  13:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  14:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  15:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  16:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
  17:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  18:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  19:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  20:Core/Src/light_rcc_init.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  21:Core/Src/light_rcc_init.c **** */
  22:Core/Src/light_rcc_init.c **** 
  23:Core/Src/light_rcc_init.c **** #define HSIState              RCC_HSI_ON
  24:Core/Src/light_rcc_init.c **** #define HSI14State            RCC_HSI14_ON
  25:Core/Src/light_rcc_init.c **** #define HSICalibrationValue   RCC_HSICALIBRATION_DEFAULT
  26:Core/Src/light_rcc_init.c **** #define HSI14CalibrationValue 16
  27:Core/Src/light_rcc_init.c **** #define PLL_PLLState          RCC_PLL_ON
  28:Core/Src/light_rcc_init.c **** #define PLL_PLLSource         RCC_PLLSOURCE_HSI
  29:Core/Src/light_rcc_init.c **** #define PLL_PLLMUL            RCC_PLL_MUL12
  30:Core/Src/light_rcc_init.c **** #define PLL_PREDIV            RCC_PREDIV_DIV1
  31:Core/Src/light_rcc_init.c **** 
ARM GAS  /tmp/ccHWmSBT.s 			page 2


  32:Core/Src/light_rcc_init.c **** static inline void Light_HAL_RCC_OscConfig(void)
  33:Core/Src/light_rcc_init.c **** {
  34:Core/Src/light_rcc_init.c ****   uint32_t tickstart;
  35:Core/Src/light_rcc_init.c ****   uint32_t pll_config;
  36:Core/Src/light_rcc_init.c ****   uint32_t pll_config2;
  37:Core/Src/light_rcc_init.c **** 
  38:Core/Src/light_rcc_init.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
  39:Core/Src/light_rcc_init.c **** 
  40:Core/Src/light_rcc_init.c ****   /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
  41:Core/Src/light_rcc_init.c ****   if(!((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) || 
  42:Core/Src/light_rcc_init.c ****   ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && 
  43:Core/Src/light_rcc_init.c ****   (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI))))
  44:Core/Src/light_rcc_init.c ****   {
  45:Core/Src/light_rcc_init.c ****     /* Enable the Internal High Speed oscillator (HSI). */
  46:Core/Src/light_rcc_init.c ****     __HAL_RCC_HSI_ENABLE();
  47:Core/Src/light_rcc_init.c ****     
  48:Core/Src/light_rcc_init.c ****     /* Get Start Tick */
  49:Core/Src/light_rcc_init.c ****     tickstart = HAL_GetTick();
  50:Core/Src/light_rcc_init.c ****     
  51:Core/Src/light_rcc_init.c ****     /* Wait till HSI is ready */
  52:Core/Src/light_rcc_init.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
  53:Core/Src/light_rcc_init.c ****     {
  54:Core/Src/light_rcc_init.c ****       if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
  55:Core/Src/light_rcc_init.c ****       {
  56:Core/Src/light_rcc_init.c ****         return;
  57:Core/Src/light_rcc_init.c ****       }
  58:Core/Src/light_rcc_init.c ****     }
  59:Core/Src/light_rcc_init.c ****   }
  60:Core/Src/light_rcc_init.c **** 
  61:Core/Src/light_rcc_init.c ****   /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
  62:Core/Src/light_rcc_init.c ****    __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(HSICalibrationValue);
  63:Core/Src/light_rcc_init.c **** 
  64:Core/Src/light_rcc_init.c ****   /*----------------------------- HSI14 Configuration --------------------------*/
  65:Core/Src/light_rcc_init.c **** 
  66:Core/Src/light_rcc_init.c ****   /* Check the HSI14 State */
  67:Core/Src/light_rcc_init.c **** 
  68:Core/Src/light_rcc_init.c ****   /* Disable ADC control of the Internal High Speed oscillator HSI14 */
  69:Core/Src/light_rcc_init.c ****   __HAL_RCC_HSI14ADC_DISABLE();
  70:Core/Src/light_rcc_init.c **** 
  71:Core/Src/light_rcc_init.c ****   /* Enable the Internal High Speed oscillator (HSI). */
  72:Core/Src/light_rcc_init.c ****   __HAL_RCC_HSI14_ENABLE();
  73:Core/Src/light_rcc_init.c **** 
  74:Core/Src/light_rcc_init.c ****   /* Get Start Tick */
  75:Core/Src/light_rcc_init.c ****   tickstart = HAL_GetTick();
  76:Core/Src/light_rcc_init.c ****   
  77:Core/Src/light_rcc_init.c ****   /* Wait till HSI is ready */  
  78:Core/Src/light_rcc_init.c ****   while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
  79:Core/Src/light_rcc_init.c ****   {
  80:Core/Src/light_rcc_init.c ****     if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
  81:Core/Src/light_rcc_init.c ****     {
  82:Core/Src/light_rcc_init.c ****       return;
  83:Core/Src/light_rcc_init.c ****     }      
  84:Core/Src/light_rcc_init.c ****   } 
  85:Core/Src/light_rcc_init.c **** 
  86:Core/Src/light_rcc_init.c ****   /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
  87:Core/Src/light_rcc_init.c ****   __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(HSI14CalibrationValue);
  88:Core/Src/light_rcc_init.c **** 
ARM GAS  /tmp/ccHWmSBT.s 			page 3


  89:Core/Src/light_rcc_init.c ****   /*-------------------------------- PLL Configuration -----------------------*/
  90:Core/Src/light_rcc_init.c **** 
  91:Core/Src/light_rcc_init.c ****     /* Check if the PLL is used as system clock or not */
  92:Core/Src/light_rcc_init.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  93:Core/Src/light_rcc_init.c ****     { 
  94:Core/Src/light_rcc_init.c ****       /* Disable the main PLL. */
  95:Core/Src/light_rcc_init.c ****       __HAL_RCC_PLL_DISABLE();
  96:Core/Src/light_rcc_init.c ****       
  97:Core/Src/light_rcc_init.c ****       /* Get Start Tick */
  98:Core/Src/light_rcc_init.c ****       tickstart = HAL_GetTick();
  99:Core/Src/light_rcc_init.c ****       
 100:Core/Src/light_rcc_init.c ****       /* Wait till PLL is disabled */
 101:Core/Src/light_rcc_init.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 102:Core/Src/light_rcc_init.c ****       {
 103:Core/Src/light_rcc_init.c ****         if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 104:Core/Src/light_rcc_init.c ****         {
 105:Core/Src/light_rcc_init.c ****           return;
 106:Core/Src/light_rcc_init.c ****         }
 107:Core/Src/light_rcc_init.c ****       }
 108:Core/Src/light_rcc_init.c **** 
 109:Core/Src/light_rcc_init.c ****       /* Configure the main PLL clock source, predivider and multiplication factor. */
 110:Core/Src/light_rcc_init.c ****       __HAL_RCC_PLL_CONFIG(PLL_PLLSource, PLL_PREDIV, PLL_PLLMUL);
 111:Core/Src/light_rcc_init.c ****       /* Enable the main PLL. */
 112:Core/Src/light_rcc_init.c ****       __HAL_RCC_PLL_ENABLE();
 113:Core/Src/light_rcc_init.c ****       
 114:Core/Src/light_rcc_init.c ****       /* Get Start Tick */
 115:Core/Src/light_rcc_init.c ****       tickstart = HAL_GetTick();
 116:Core/Src/light_rcc_init.c ****       
 117:Core/Src/light_rcc_init.c ****       /* Wait till PLL is ready */
 118:Core/Src/light_rcc_init.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 119:Core/Src/light_rcc_init.c ****       {
 120:Core/Src/light_rcc_init.c ****         if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 121:Core/Src/light_rcc_init.c ****         {
 122:Core/Src/light_rcc_init.c ****           return;
 123:Core/Src/light_rcc_init.c ****         }
 124:Core/Src/light_rcc_init.c ****       }
 125:Core/Src/light_rcc_init.c ****     }
 126:Core/Src/light_rcc_init.c ****     else
 127:Core/Src/light_rcc_init.c ****     {
 128:Core/Src/light_rcc_init.c ****       /* Do not return HAL_ERROR if request repeats the current configuration */
 129:Core/Src/light_rcc_init.c ****       pll_config  = RCC->CFGR;
 130:Core/Src/light_rcc_init.c ****       pll_config2 = RCC->CFGR2;
 131:Core/Src/light_rcc_init.c ****       if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != PLL_PLLSource) ||
 132:Core/Src/light_rcc_init.c ****           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != PLL_PREDIV) ||
 133:Core/Src/light_rcc_init.c ****           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != PLL_PLLMUL))
 134:Core/Src/light_rcc_init.c ****       {
 135:Core/Src/light_rcc_init.c ****         return;
 136:Core/Src/light_rcc_init.c ****       }
 137:Core/Src/light_rcc_init.c ****     }
 138:Core/Src/light_rcc_init.c **** 
 139:Core/Src/light_rcc_init.c ****   return;
 140:Core/Src/light_rcc_init.c **** }
 141:Core/Src/light_rcc_init.c **** 
 142:Core/Src/light_rcc_init.c **** 
 143:Core/Src/light_rcc_init.c **** /*
 144:Core/Src/light_rcc_init.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 145:Core/Src/light_rcc_init.c ****                               |RCC_CLOCKTYPE_PCLK1;
ARM GAS  /tmp/ccHWmSBT.s 			page 4


 146:Core/Src/light_rcc_init.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 147:Core/Src/light_rcc_init.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 148:Core/Src/light_rcc_init.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 149:Core/Src/light_rcc_init.c **** */
 150:Core/Src/light_rcc_init.c **** 
 151:Core/Src/light_rcc_init.c **** #define FLatency        FLASH_LATENCY_1
 152:Core/Src/light_rcc_init.c **** #define SYSCLKSource    RCC_SYSCLKSOURCE_PLLCLK
 153:Core/Src/light_rcc_init.c **** #define AHBCLKDivider   RCC_SYSCLK_DIV1
 154:Core/Src/light_rcc_init.c **** #define APB1CLKDivider  RCC_HCLK_DIV1
 155:Core/Src/light_rcc_init.c **** 
 156:Core/Src/light_rcc_init.c **** static inline void Light_HAL_RCC_ClockConfig(void)
 157:Core/Src/light_rcc_init.c **** {
 158:Core/Src/light_rcc_init.c ****   uint32_t tickstart;
 159:Core/Src/light_rcc_init.c **** 
 160:Core/Src/light_rcc_init.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 161:Core/Src/light_rcc_init.c ****   must be correctly programmed according to the frequency of the CPU clock 
 162:Core/Src/light_rcc_init.c ****     (HCLK) of the device. */
 163:Core/Src/light_rcc_init.c **** 
 164:Core/Src/light_rcc_init.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 165:Core/Src/light_rcc_init.c ****   if(FLatency > __HAL_FLASH_GET_LATENCY())
 166:Core/Src/light_rcc_init.c ****   {
 167:Core/Src/light_rcc_init.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 168:Core/Src/light_rcc_init.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 169:Core/Src/light_rcc_init.c ****     
 170:Core/Src/light_rcc_init.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 171:Core/Src/light_rcc_init.c ****     memory by reading the FLASH_ACR register */
 172:Core/Src/light_rcc_init.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 173:Core/Src/light_rcc_init.c ****     {
 174:Core/Src/light_rcc_init.c ****       return;
 175:Core/Src/light_rcc_init.c ****     }
 176:Core/Src/light_rcc_init.c ****   }
 177:Core/Src/light_rcc_init.c **** 
 178:Core/Src/light_rcc_init.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 179:Core/Src/light_rcc_init.c **** 
 180:Core/Src/light_rcc_init.c ****   /* Set the highest APB divider in order to ensure that we do not go through
 181:Core/Src/light_rcc_init.c ****       a non-spec phase whatever we decrease or increase HCLK. */
 182:Core/Src/light_rcc_init.c ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 183:Core/Src/light_rcc_init.c **** 
 184:Core/Src/light_rcc_init.c ****   /* Set the new HCLK clock divider */
 185:Core/Src/light_rcc_init.c ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, AHBCLKDivider);
 186:Core/Src/light_rcc_init.c ****   
 187:Core/Src/light_rcc_init.c **** 
 188:Core/Src/light_rcc_init.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 189:Core/Src/light_rcc_init.c **** 
 190:Core/Src/light_rcc_init.c ****   /* PLL is selected as System Clock Source */
 191:Core/Src/light_rcc_init.c ****   /* Check the PLL ready flag */
 192:Core/Src/light_rcc_init.c ****   if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 193:Core/Src/light_rcc_init.c ****   {
 194:Core/Src/light_rcc_init.c ****     return;
 195:Core/Src/light_rcc_init.c ****   }
 196:Core/Src/light_rcc_init.c ****   
 197:Core/Src/light_rcc_init.c ****   /* HSI is selected as System Clock Source */
 198:Core/Src/light_rcc_init.c ****   else
 199:Core/Src/light_rcc_init.c ****   {
 200:Core/Src/light_rcc_init.c ****     /* Check the HSI ready flag */  
 201:Core/Src/light_rcc_init.c ****     if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 202:Core/Src/light_rcc_init.c ****     {
ARM GAS  /tmp/ccHWmSBT.s 			page 5


 203:Core/Src/light_rcc_init.c ****       return;
 204:Core/Src/light_rcc_init.c ****     }
 205:Core/Src/light_rcc_init.c ****   }
 206:Core/Src/light_rcc_init.c ****   __HAL_RCC_SYSCLK_CONFIG(SYSCLKSource);
 207:Core/Src/light_rcc_init.c **** 
 208:Core/Src/light_rcc_init.c ****   /* Get Start Tick */
 209:Core/Src/light_rcc_init.c ****   tickstart = HAL_GetTick();
 210:Core/Src/light_rcc_init.c ****   
 211:Core/Src/light_rcc_init.c ****   while (__HAL_RCC_GET_SYSCLK_SOURCE() != (SYSCLKSource << RCC_CFGR_SWS_Pos))
 212:Core/Src/light_rcc_init.c ****   {
 213:Core/Src/light_rcc_init.c ****     if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 214:Core/Src/light_rcc_init.c ****     {
 215:Core/Src/light_rcc_init.c ****       return;
 216:Core/Src/light_rcc_init.c ****     }
 217:Core/Src/light_rcc_init.c ****   }
 218:Core/Src/light_rcc_init.c **** 
 219:Core/Src/light_rcc_init.c **** 
 220:Core/Src/light_rcc_init.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 221:Core/Src/light_rcc_init.c ****   if(FLatency < __HAL_FLASH_GET_LATENCY())
 222:Core/Src/light_rcc_init.c ****   {    
 223:Core/Src/light_rcc_init.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 224:Core/Src/light_rcc_init.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 225:Core/Src/light_rcc_init.c ****     
 226:Core/Src/light_rcc_init.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 227:Core/Src/light_rcc_init.c ****     memory by reading the FLASH_ACR register */
 228:Core/Src/light_rcc_init.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 229:Core/Src/light_rcc_init.c ****     {
 230:Core/Src/light_rcc_init.c ****       return;
 231:Core/Src/light_rcc_init.c ****     }
 232:Core/Src/light_rcc_init.c ****   }    
 233:Core/Src/light_rcc_init.c **** 
 234:Core/Src/light_rcc_init.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 235:Core/Src/light_rcc_init.c **** 
 236:Core/Src/light_rcc_init.c ****   MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, APB1CLKDivider);
 237:Core/Src/light_rcc_init.c **** 
 238:Core/Src/light_rcc_init.c ****   /* Update the SystemCoreClock global variable */
 239:Core/Src/light_rcc_init.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 240:Core/Src/light_rcc_init.c **** 
 241:Core/Src/light_rcc_init.c ****   /* Configure the source of time base considering new system clocks settings*/
 242:Core/Src/light_rcc_init.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 243:Core/Src/light_rcc_init.c ****   
 244:Core/Src/light_rcc_init.c ****   return;
 245:Core/Src/light_rcc_init.c **** }
 246:Core/Src/light_rcc_init.c **** 
 247:Core/Src/light_rcc_init.c **** static inline void Light_HAL_RCCEx_PeriphCLKConfig(void) {
 248:Core/Src/light_rcc_init.c **** 
 249:Core/Src/light_rcc_init.c ****   /* Configure the USART1 clock source PCLK1 */
 250:Core/Src/light_rcc_init.c ****   __HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_PCLK1);
 251:Core/Src/light_rcc_init.c **** 
 252:Core/Src/light_rcc_init.c ****   /* Configure the I2C1 clock source */
 253:Core/Src/light_rcc_init.c ****   __HAL_RCC_I2C1_CONFIG(RCC_I2C1CLKSOURCE_HSI);
 254:Core/Src/light_rcc_init.c **** 
 255:Core/Src/light_rcc_init.c **** }
 256:Core/Src/light_rcc_init.c **** 
 257:Core/Src/light_rcc_init.c **** 
 258:Core/Src/light_rcc_init.c **** 
 259:Core/Src/light_rcc_init.c **** /* Light System Clock Configuration */
ARM GAS  /tmp/ccHWmSBT.s 			page 6


 260:Core/Src/light_rcc_init.c **** 
 261:Core/Src/light_rcc_init.c **** void Light_SystemClock_Config(void)
 262:Core/Src/light_rcc_init.c **** {
  28              		.loc 1 262 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37              	.LBB10:
  38              	.LBB11:
  41:Core/Src/light_rcc_init.c ****   ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && 
  39              		.loc 1 41 0
  40 0002 674B     		ldr	r3, .L19
  41 0004 5B68     		ldr	r3, [r3, #4]
  42 0006 0C22     		movs	r2, #12
  43 0008 1A42     		tst	r2, r3
  44 000a 1AD0     		beq	.L2
  42:Core/Src/light_rcc_init.c ****   (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI))))
  45              		.loc 1 42 0
  46 000c 644B     		ldr	r3, .L19
  47 000e 5B68     		ldr	r3, [r3, #4]
  48 0010 1340     		ands	r3, r2
  41:Core/Src/light_rcc_init.c ****   ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && 
  49              		.loc 1 41 0
  50 0012 082B     		cmp	r3, #8
  51 0014 03D1     		bne	.L3
  43:Core/Src/light_rcc_init.c ****   {
  52              		.loc 1 43 0
  53 0016 624B     		ldr	r3, .L19
  54 0018 5B68     		ldr	r3, [r3, #4]
  42:Core/Src/light_rcc_init.c ****   (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI))))
  55              		.loc 1 42 0
  56 001a DB03     		lsls	r3, r3, #15
  57 001c 11D5     		bpl	.L2
  58              	.L3:
  46:Core/Src/light_rcc_init.c ****     
  59              		.loc 1 46 0
  60 001e 604A     		ldr	r2, .L19
  61 0020 1168     		ldr	r1, [r2]
  62 0022 0123     		movs	r3, #1
  63 0024 0B43     		orrs	r3, r1
  64 0026 1360     		str	r3, [r2]
  49:Core/Src/light_rcc_init.c ****     
  65              		.loc 1 49 0
  66 0028 FFF7FEFF 		bl	HAL_GetTick
  67              	.LVL0:
  68 002c 0400     		movs	r4, r0
  69              	.LVL1:
  70 002e 04E0     		b	.L4
  71              	.LVL2:
  72              	.L6:
  54:Core/Src/light_rcc_init.c ****       {
  73              		.loc 1 54 0
ARM GAS  /tmp/ccHWmSBT.s 			page 7


  74 0030 FFF7FEFF 		bl	HAL_GetTick
  75              	.LVL3:
  76 0034 001B     		subs	r0, r0, r4
  77 0036 0228     		cmp	r0, #2
  78 0038 5FD8     		bhi	.L5
  79              	.L4:
  52:Core/Src/light_rcc_init.c ****     {
  80              		.loc 1 52 0
  81 003a 594B     		ldr	r3, .L19
  82 003c 1B68     		ldr	r3, [r3]
  83 003e 9B07     		lsls	r3, r3, #30
  84 0040 F6D5     		bpl	.L6
  85              	.LVL4:
  86              	.L2:
  62:Core/Src/light_rcc_init.c **** 
  87              		.loc 1 62 0
  88 0042 574B     		ldr	r3, .L19
  89 0044 1A68     		ldr	r2, [r3]
  90 0046 F821     		movs	r1, #248
  91 0048 8A43     		bics	r2, r1
  92 004a 7839     		subs	r1, r1, #120
  93 004c 0A43     		orrs	r2, r1
  94 004e 1A60     		str	r2, [r3]
  69:Core/Src/light_rcc_init.c **** 
  95              		.loc 1 69 0
  96 0050 596B     		ldr	r1, [r3, #52]
  97 0052 0422     		movs	r2, #4
  98 0054 0A43     		orrs	r2, r1
  99 0056 5A63     		str	r2, [r3, #52]
  72:Core/Src/light_rcc_init.c **** 
 100              		.loc 1 72 0
 101 0058 596B     		ldr	r1, [r3, #52]
 102 005a 0122     		movs	r2, #1
 103 005c 0A43     		orrs	r2, r1
 104 005e 5A63     		str	r2, [r3, #52]
  75:Core/Src/light_rcc_init.c ****   
 105              		.loc 1 75 0
 106 0060 FFF7FEFF 		bl	HAL_GetTick
 107              	.LVL5:
 108 0064 0400     		movs	r4, r0
 109              	.LVL6:
 110 0066 04E0     		b	.L7
 111              	.LVL7:
 112              	.L8:
  80:Core/Src/light_rcc_init.c ****     {
 113              		.loc 1 80 0
 114 0068 FFF7FEFF 		bl	HAL_GetTick
 115              	.LVL8:
 116 006c 001B     		subs	r0, r0, r4
 117 006e 0228     		cmp	r0, #2
 118 0070 43D8     		bhi	.L5
 119              	.L7:
  78:Core/Src/light_rcc_init.c ****   {
 120              		.loc 1 78 0
 121 0072 4B4B     		ldr	r3, .L19
 122 0074 5B6B     		ldr	r3, [r3, #52]
 123 0076 9B07     		lsls	r3, r3, #30
ARM GAS  /tmp/ccHWmSBT.s 			page 8


 124 0078 F6D5     		bpl	.L8
  87:Core/Src/light_rcc_init.c **** 
 125              		.loc 1 87 0
 126 007a 494B     		ldr	r3, .L19
 127 007c 5A6B     		ldr	r2, [r3, #52]
 128 007e F821     		movs	r1, #248
 129 0080 8A43     		bics	r2, r1
 130 0082 7839     		subs	r1, r1, #120
 131 0084 0A43     		orrs	r2, r1
 132 0086 5A63     		str	r2, [r3, #52]
  92:Core/Src/light_rcc_init.c ****     { 
 133              		.loc 1 92 0
 134 0088 5B68     		ldr	r3, [r3, #4]
 135 008a 0C22     		movs	r2, #12
 136 008c 1340     		ands	r3, r2
 137 008e 082B     		cmp	r3, #8
 138 0090 30D0     		beq	.L9
  95:Core/Src/light_rcc_init.c ****       
 139              		.loc 1 95 0
 140 0092 434A     		ldr	r2, .L19
 141 0094 1168     		ldr	r1, [r2]
 142 0096 434B     		ldr	r3, .L19+4
 143 0098 0B40     		ands	r3, r1
 144 009a 1360     		str	r3, [r2]
  98:Core/Src/light_rcc_init.c ****       
 145              		.loc 1 98 0
 146 009c FFF7FEFF 		bl	HAL_GetTick
 147              	.LVL9:
 148 00a0 0400     		movs	r4, r0
 149              	.LVL10:
 150 00a2 04E0     		b	.L10
 151              	.LVL11:
 152              	.L11:
 103:Core/Src/light_rcc_init.c ****         {
 153              		.loc 1 103 0
 154 00a4 FFF7FEFF 		bl	HAL_GetTick
 155              	.LVL12:
 156 00a8 001B     		subs	r0, r0, r4
 157 00aa 0228     		cmp	r0, #2
 158 00ac 25D8     		bhi	.L5
 159              	.L10:
 101:Core/Src/light_rcc_init.c ****       {
 160              		.loc 1 101 0
 161 00ae 3C4B     		ldr	r3, .L19
 162 00b0 1B68     		ldr	r3, [r3]
 163 00b2 9B01     		lsls	r3, r3, #6
 164 00b4 F6D4     		bmi	.L11
 110:Core/Src/light_rcc_init.c ****       /* Enable the main PLL. */
 165              		.loc 1 110 0
 166 00b6 3A4B     		ldr	r3, .L19
 167 00b8 DA6A     		ldr	r2, [r3, #44]
 168 00ba 0F21     		movs	r1, #15
 169 00bc 8A43     		bics	r2, r1
 170 00be DA62     		str	r2, [r3, #44]
 171 00c0 5968     		ldr	r1, [r3, #4]
 172 00c2 394A     		ldr	r2, .L19+8
 173 00c4 0A40     		ands	r2, r1
ARM GAS  /tmp/ccHWmSBT.s 			page 9


 174 00c6 A021     		movs	r1, #160
 175 00c8 8903     		lsls	r1, r1, #14
 176 00ca 0A43     		orrs	r2, r1
 177 00cc 5A60     		str	r2, [r3, #4]
 112:Core/Src/light_rcc_init.c ****       
 178              		.loc 1 112 0
 179 00ce 1A68     		ldr	r2, [r3]
 180 00d0 8021     		movs	r1, #128
 181 00d2 4904     		lsls	r1, r1, #17
 182 00d4 0A43     		orrs	r2, r1
 183 00d6 1A60     		str	r2, [r3]
 115:Core/Src/light_rcc_init.c ****       
 184              		.loc 1 115 0
 185 00d8 FFF7FEFF 		bl	HAL_GetTick
 186              	.LVL13:
 187 00dc 0400     		movs	r4, r0
 188              	.LVL14:
 189 00de 04E0     		b	.L12
 190              	.LVL15:
 191              	.L13:
 120:Core/Src/light_rcc_init.c ****         {
 192              		.loc 1 120 0
 193 00e0 FFF7FEFF 		bl	HAL_GetTick
 194              	.LVL16:
 195 00e4 001B     		subs	r0, r0, r4
 196 00e6 0228     		cmp	r0, #2
 197 00e8 07D8     		bhi	.L5
 198              	.L12:
 118:Core/Src/light_rcc_init.c ****       {
 199              		.loc 1 118 0
 200 00ea 2D4B     		ldr	r3, .L19
 201 00ec 1B68     		ldr	r3, [r3]
 202 00ee 9B01     		lsls	r3, r3, #6
 203 00f0 F6D5     		bpl	.L13
 204 00f2 02E0     		b	.L5
 205              	.L9:
 129:Core/Src/light_rcc_init.c ****       pll_config2 = RCC->CFGR2;
 206              		.loc 1 129 0
 207 00f4 2A4B     		ldr	r3, .L19
 208 00f6 5A68     		ldr	r2, [r3, #4]
 130:Core/Src/light_rcc_init.c ****       if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != PLL_PLLSource) ||
 209              		.loc 1 130 0
 210 00f8 DB6A     		ldr	r3, [r3, #44]
 211              	.L5:
 212              	.LVL17:
 213              	.LBE11:
 214              	.LBE10:
 215              	.LBB12:
 216              	.LBB13:
 165:Core/Src/light_rcc_init.c ****   {
 217              		.loc 1 165 0
 218 00fa 2C4B     		ldr	r3, .L19+12
 219 00fc 1B68     		ldr	r3, [r3]
 220 00fe DB07     		lsls	r3, r3, #31
 221 0100 07D4     		bmi	.L14
 168:Core/Src/light_rcc_init.c ****     
 222              		.loc 1 168 0
ARM GAS  /tmp/ccHWmSBT.s 			page 10


 223 0102 2A4B     		ldr	r3, .L19+12
 224 0104 1A68     		ldr	r2, [r3]
 225 0106 0121     		movs	r1, #1
 226 0108 0A43     		orrs	r2, r1
 227 010a 1A60     		str	r2, [r3]
 172:Core/Src/light_rcc_init.c ****     {
 228              		.loc 1 172 0
 229 010c 1B68     		ldr	r3, [r3]
 230 010e 1942     		tst	r1, r3
 231 0110 3CD0     		beq	.L15
 232              	.L14:
 182:Core/Src/light_rcc_init.c **** 
 233              		.loc 1 182 0
 234 0112 234B     		ldr	r3, .L19
 235 0114 5A68     		ldr	r2, [r3, #4]
 236 0116 E021     		movs	r1, #224
 237 0118 C900     		lsls	r1, r1, #3
 238 011a 0A43     		orrs	r2, r1
 239 011c 5A60     		str	r2, [r3, #4]
 185:Core/Src/light_rcc_init.c ****   
 240              		.loc 1 185 0
 241 011e 5A68     		ldr	r2, [r3, #4]
 242 0120 F021     		movs	r1, #240
 243 0122 8A43     		bics	r2, r1
 244 0124 5A60     		str	r2, [r3, #4]
 192:Core/Src/light_rcc_init.c ****   {
 245              		.loc 1 192 0
 246 0126 1B68     		ldr	r3, [r3]
 247 0128 9B01     		lsls	r3, r3, #6
 248 012a 2FD5     		bpl	.L15
 201:Core/Src/light_rcc_init.c ****     {
 249              		.loc 1 201 0
 250 012c 1C4B     		ldr	r3, .L19
 251 012e 1B68     		ldr	r3, [r3]
 252 0130 9B07     		lsls	r3, r3, #30
 253 0132 2BD5     		bpl	.L15
 206:Core/Src/light_rcc_init.c **** 
 254              		.loc 1 206 0
 255 0134 1A49     		ldr	r1, .L19
 256 0136 4B68     		ldr	r3, [r1, #4]
 257 0138 0322     		movs	r2, #3
 258 013a 9343     		bics	r3, r2
 259 013c 013A     		subs	r2, r2, #1
 260 013e 1343     		orrs	r3, r2
 261 0140 4B60     		str	r3, [r1, #4]
 209:Core/Src/light_rcc_init.c ****   
 262              		.loc 1 209 0
 263 0142 FFF7FEFF 		bl	HAL_GetTick
 264              	.LVL18:
 265 0146 0400     		movs	r4, r0
 266              	.LVL19:
 267 0148 05E0     		b	.L16
 268              	.LVL20:
 269              	.L17:
 213:Core/Src/light_rcc_init.c ****     {
 270              		.loc 1 213 0
 271 014a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccHWmSBT.s 			page 11


 272              	.LVL21:
 273 014e 001B     		subs	r0, r0, r4
 274 0150 174B     		ldr	r3, .L19+16
 275 0152 9842     		cmp	r0, r3
 276 0154 1AD8     		bhi	.L15
 277              	.L16:
 211:Core/Src/light_rcc_init.c ****   {
 278              		.loc 1 211 0
 279 0156 124B     		ldr	r3, .L19
 280 0158 5B68     		ldr	r3, [r3, #4]
 281 015a 0C22     		movs	r2, #12
 282 015c 1340     		ands	r3, r2
 283 015e 082B     		cmp	r3, #8
 284 0160 F3D1     		bne	.L17
 221:Core/Src/light_rcc_init.c ****   {    
 285              		.loc 1 221 0
 286 0162 124B     		ldr	r3, .L19+12
 287 0164 1B68     		ldr	r3, [r3]
 236:Core/Src/light_rcc_init.c **** 
 288              		.loc 1 236 0
 289 0166 0E4C     		ldr	r4, .L19
 290              	.LVL22:
 291 0168 6268     		ldr	r2, [r4, #4]
 292 016a 124B     		ldr	r3, .L19+20
 293 016c 1340     		ands	r3, r2
 294 016e 6360     		str	r3, [r4, #4]
 239:Core/Src/light_rcc_init.c **** 
 295              		.loc 1 239 0
 296 0170 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 297              	.LVL23:
 298 0174 6368     		ldr	r3, [r4, #4]
 299 0176 1B09     		lsrs	r3, r3, #4
 300 0178 0F22     		movs	r2, #15
 301 017a 1340     		ands	r3, r2
 302 017c 0E4A     		ldr	r2, .L19+24
 303 017e D35C     		ldrb	r3, [r2, r3]
 304 0180 D840     		lsrs	r0, r0, r3
 305 0182 0E4B     		ldr	r3, .L19+28
 306 0184 1860     		str	r0, [r3]
 242:Core/Src/light_rcc_init.c ****   
 307              		.loc 1 242 0
 308 0186 0320     		movs	r0, #3
 309 0188 FFF7FEFF 		bl	HAL_InitTick
 310              	.LVL24:
 311              	.L15:
 312              	.LBE13:
 313              	.LBE12:
 314              	.LBB14:
 315              	.LBB15:
 250:Core/Src/light_rcc_init.c **** 
 316              		.loc 1 250 0
 317 018c 044B     		ldr	r3, .L19
 318 018e 1A6B     		ldr	r2, [r3, #48]
 319 0190 0321     		movs	r1, #3
 320 0192 8A43     		bics	r2, r1
 321 0194 1A63     		str	r2, [r3, #48]
 253:Core/Src/light_rcc_init.c **** 
ARM GAS  /tmp/ccHWmSBT.s 			page 12


 322              		.loc 1 253 0
 323 0196 1A6B     		ldr	r2, [r3, #48]
 324 0198 0D31     		adds	r1, r1, #13
 325 019a 8A43     		bics	r2, r1
 326 019c 1A63     		str	r2, [r3, #48]
 327              	.LBE15:
 328              	.LBE14:
 263:Core/Src/light_rcc_init.c **** 
 264:Core/Src/light_rcc_init.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 265:Core/Src/light_rcc_init.c ****   * in the RCC_OscInitTypeDef structure.
 266:Core/Src/light_rcc_init.c ****   */
 267:Core/Src/light_rcc_init.c **** 
 268:Core/Src/light_rcc_init.c ****   Light_HAL_RCC_OscConfig();
 269:Core/Src/light_rcc_init.c **** 
 270:Core/Src/light_rcc_init.c ****   Light_HAL_RCC_ClockConfig();
 271:Core/Src/light_rcc_init.c **** 
 272:Core/Src/light_rcc_init.c ****   Light_HAL_RCCEx_PeriphCLKConfig();
 273:Core/Src/light_rcc_init.c **** 
 274:Core/Src/light_rcc_init.c **** }
 329              		.loc 1 274 0
 330              		@ sp needed
 331 019e 10BD     		pop	{r4, pc}
 332              	.L20:
 333              		.align	2
 334              	.L19:
 335 01a0 00100240 		.word	1073876992
 336 01a4 FFFFFFFE 		.word	-16777217
 337 01a8 FFFFC2FF 		.word	-3997697
 338 01ac 00200240 		.word	1073881088
 339 01b0 88130000 		.word	5000
 340 01b4 FFF8FFFF 		.word	-1793
 341 01b8 00000000 		.word	AHBPrescTable
 342 01bc 00000000 		.word	SystemCoreClock
 343              		.cfi_endproc
 344              	.LFE44:
 346              		.text
 347              	.Letext0:
 348              		.file 2 "/home/yuan/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 349              		.file 3 "/home/yuan/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 350              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 351              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 352              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 353              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 354              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  /tmp/ccHWmSBT.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 light_rcc_init.c
     /tmp/ccHWmSBT.s:20     .text.Light_SystemClock_Config:00000000 $t
     /tmp/ccHWmSBT.s:25     .text.Light_SystemClock_Config:00000000 Light_SystemClock_Config
     /tmp/ccHWmSBT.s:335    .text.Light_SystemClock_Config:000001a0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCC_GetSysClockFreq
HAL_InitTick
AHBPrescTable
SystemCoreClock
